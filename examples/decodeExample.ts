import { defaultAbiCoder, Interface } from '@ethersproject/abi';
import relayerLibraryAbi from '../abi/VaultActions.json';

function decode() {
    const decoded = defaultAbiCoder.decode(
        ['uint256', 'uint256'],
        '0x00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000005c9197376ba197bf'
    );
    console.log(decoded[0].toString());
    console.log(decoded[1].toString());
}

function decodeExit() {
    const relayerLibrary = new Interface(relayerLibraryAbi);
    const decodedExit = relayerLibrary.decodeFunctionData(
        'exitPool',
        '0xd80952d506df3b2bbb68adc8b0e302443692037ed9f91b4200000000000000000000006300000000000000000000000000000000000000000000000000000000000000000000000000000000000000009c14ca2486e824eccc0e0f95969d1df22da9d2070000000000000000000000009c14ca2486e824eccc0e0f95969d1df22da9d20700000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000030000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec70000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000005c9197376ba197bf00000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000000ba100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001ba100000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002ba10000000000000000000000000000000000000000000000000000000000002'
    );
    console.log(decodedExit.poolId, 'PoolId');
    console.log(decodedExit.kind, 'Kind');
    console.log(decodedExit.sender, 'Sender');
    console.log(decodedExit.recipient, 'Recipient');
    console.log('Request:');
    console.log(decodedExit.request.assets, 'assets');
    console.log(decodedExit.request.minAmountsOut, 'minAmountsOut');
    console.log(decodedExit.request.userData, 'userData');
    console.log(decodedExit.request.toInternalBalance, 'internalBalance');
    console.log(decodedExit.outputReferences.toString());

    // poolId: '0x06df3b2bbb68adc8b0e302443692037ed9f91b42000000000000000000000063',
    // kind: 0,
    // sender: '0x9C14ca2486E824eCcC0e0f95969D1DF22DA9D207',
    // recipient: '0x9C14ca2486E824eCcC0e0f95969D1DF22DA9D207',
    // request: [
    //     [
    //     '0x6B175474E89094C44Da98b954EedeAC495271d0F',
    //     '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',
    //     '0xdAC17F958D2ee523a2206206994597C13D831ec7'
    //     ],
    //     [ [BigNumber], [BigNumber], [BigNumber] ],
    //     '0x00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000005c9197376ba197bf',
    //     true,
    //     assets: [
    //     '0x6B175474E89094C44Da98b954EedeAC495271d0F',
    //     '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',
    //     '0xdAC17F958D2ee523a2206206994597C13D831ec7'
    //     ],
    //     minAmountsOut: [ [BigNumber], [BigNumber], [BigNumber] ],
    //     userData: '0x00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000005c9197376ba197bf', // 6670278787397162943
    //     toInternalBalance: true
    // ],
    // outputReferences: [
    //     [ [BigNumber], [BigNumber], index: [BigNumber], key: [BigNumber] ],
    //     [ [BigNumber], [BigNumber], index: [BigNumber], key: [BigNumber] ],
    //     [ [BigNumber], [BigNumber], index: [BigNumber], key: [BigNumber] ]
    // ]
    // 0, 84158459389524002386711626555386694745894712975979482213248346579970065170432, 
    // 1, 84158459389524002386711626555386694745894712975979482213248346579970065170433, 
    // 2, 84158459389524002386711626555386694745894712975979482213248346579970065170434
}

function decodeBatchSwap() {
    const relayerLibrary = new Interface(relayerLibraryAbi);
    const decodedBatchSwap = relayerLibrary.decodeFunctionData(
        'batchSwap',
        '0x183694460000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001800000000000000000000000009c14ca2486e824eccc0e0f95969d1df22da9d20700000000000000000000000000000000000000000000000000000000000000010000000000000000000000009c14ca2486e824eccc0e0f95969d1df22da9d207000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001a0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
    );

    console.log(decodedBatchSwap);
    // return relayerLibrary.encodeFunctionData('batchSwap', [
    //     params.swapType,
    //     params.swaps,
    //     params.assets,
    //     params.funds,
    //     params.limits,
    //     params.deadline,
    //     params.value,
    //     params.outputReferences,
    // ]);
}

// decodeExit();
decodeBatchSwap();
// decode();
